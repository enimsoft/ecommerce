{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n// import App from 'next/app'\nimport { useEffect } from 'react';\nimport Router from 'next/router';\nimport '../sass/main.scss';\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  useEffect(function () {\n    if (window.onNextjsAppDidMount) {\n      window.onNextjsAppDidMount();\n    }\n\n    if (window.onNextjsRouteChangeComplete) {\n      window.onNextjsRouteChangeComplete();\n    }\n\n    var handleRouteChangeStart = function handleRouteChangeStart() {\n      if (window.onNextjsRouteChangeStart) {\n        window.onNextjsRouteChangeStart();\n      }\n    };\n\n    var handleRouteChangeComplete = function handleRouteChangeComplete() {\n      if (window.onNextjsRouteChangeComplete) {\n        window.onNextjsRouteChangeComplete();\n      }\n    };\n\n    Router.events.on('routeChangeStart', handleRouteChangeStart);\n    Router.events.on('routeChangeComplete', handleRouteChangeComplete);\n    return function () {\n      Router.events.off('routeChangeStart', handleRouteChangeStart);\n      Router.events.off('routeChangeComplete', handleRouteChangeComplete);\n    };\n  }, []);\n  return __jsx(Component, pageProps);\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}