{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport ReactHtmlParser, { convertNodeToElement } from 'react-html-parser';\nimport ScriptTag from 'react-script-tag';\nimport Link from './link';\nimport _ from 'lodash';\n\nconst convertChildren = (children, index) => _.map(children, childNode => convertNodeToElement(childNode, index, _.noop()));\n\nexport default function htmlToReact(html) {\n  if (!html) {\n    return null;\n  }\n\n  return ReactHtmlParser(html, {\n    transform: (node, index) => {\n      if (node.type === 'script') {\n        if (!_.isEmpty(node.children)) {\n          return __jsx(ScriptTag, _extends({\n            key: index\n          }, node.attribs), convertChildren(node.children, index));\n        } else {\n          return __jsx(ScriptTag, _extends({\n            key: index\n          }, node.attribs));\n        }\n      } else if (node.type === 'tag' && node.name === 'a') {\n        const href = node.attribs.href;\n\n        const props = _.omit(node.attribs, 'href'); // use Link only if there are no custom attributes like style, class, and what's not that might break react\n\n\n        if (_.isEmpty(props)) {\n          return __jsx(Link, _extends({\n            key: index,\n            href: href\n          }, props), convertChildren(node.children, index));\n        }\n      }\n    }\n  });\n}\n;","map":null,"metadata":{},"sourceType":"module"}