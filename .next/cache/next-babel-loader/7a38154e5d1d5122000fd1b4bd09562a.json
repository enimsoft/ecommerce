{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\nimport { Helmet } from 'react-helmet';\nimport ScriptTag from 'react-script-tag';\nimport { withPrefix } from '../utils';\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const initialProps = await Document.getInitialProps(ctx); // see https://github.com/nfl/react-helmet#server-usage for more information\n    // 'head' was occupied by 'renderPage().head', we cannot use it\n\n    return _objectSpread(_objectSpread({}, initialProps), {}, {\n      helmet: Helmet.renderStatic()\n    });\n  } // should render on <html>\n\n\n  get helmetHtmlAttrComponents() {\n    return this.props.helmet.htmlAttributes.toComponent();\n  } // should render on <body>\n\n\n  get helmetBodyAttrComponents() {\n    return this.props.helmet.bodyAttributes.toComponent();\n  } // should render on <head>\n\n\n  get helmetHeadComponents() {\n    return Object.keys(this.props.helmet).filter(el => el !== 'htmlAttributes' && el !== 'bodyAttributes').map(el => this.props.helmet[el].toComponent());\n  }\n\n  render() {\n    return __jsx(Html, this.helmetHtmlAttrComponents, __jsx(Head, null, this.helmetHeadComponents), __jsx(\"body\", this.helmetBodyAttrComponents, __jsx(Main, null), __jsx(ScriptTag, {\n      src: withPrefix('js/lib/modernizr.js')\n    }), __jsx(ScriptTag, {\n      src: withPrefix('js/main.js')\n    }), __jsx(ScriptTag, {\n      src: withPrefix('js/page_load.js')\n    }), __jsx(ScriptTag, {\n      src: withPrefix('js/page_unload.js')\n    }), __jsx(NextScript, null)));\n  }\n\n}\n\nexport default MyDocument;","map":null,"metadata":{},"sourceType":"module"}