{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport NextLink from 'next/link';\nexport default function Link(_ref) {\n  let {\n    children,\n    href\n  } = _ref,\n      other = _objectWithoutProperties(_ref, [\"children\", \"href\"]);\n\n  // Pass Any internal link to Next.js Link, for anything else, use <a> tag\n  const internal = /^\\/(?!\\/)/.test(href);\n\n  if (internal) {\n    // For root page, use index.js, for rest use [...slug].js\n    const page = href === '/' ? '/' : '/[...slug]';\n    return __jsx(NextLink, {\n      href: page,\n      as: href\n    }, __jsx(\"a\", other, children));\n  }\n\n  return __jsx(\"a\", _extends({\n    href: href\n  }, other), children);\n}","map":null,"metadata":{},"sourceType":"module"}